version: "3.5"
name: monitor-otel-collector-kafka-influx

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - default_bridge
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    hostname: broker
    networks:
      - default_bridge
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: /kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server broker:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 3
  #  kafka-init-topics:
  #    image: confluentinc/cp-kafka:7.2.1.arm64
  #    volumes:
  #      - ./message.json:/data/message.json
  #    depends_on:
  #      - broker
  #    command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #               cub kafka-ready -b broker:29092 1 30 && \
  #               kafka-topics --create --topic logtopic --if-not-exists --bootstrap-server broker:29092 && \
  #               kafka-console-producer --bootstrap-server broker:29092 --topic logtopic < /data/message.json'"

  init-topics:
    image: confluentinc/cp-kafka:7.2.1.arm64
    networks:
      - default_bridge
    depends_on:
      - broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic audit_logs_topic 
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic all_log_topic 
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic metrics_topic 
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic traces_topic 

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "


  broker-ui:
    container_name: broker-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8085:8080
    depends_on:
      - broker
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
    networks:
      - default_bridge

  otel-collector-consumer:
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
    container_name: otel-collector-consumer
    command: ["--config=/etc/config.yml"]
    volumes:
      - ./otel/otel-collector-consumer-config.yml:/etc/config.yml
    ports:
      - "4317" # OTLP gRPC receiver port
      - "4318"
      - "8889" # Promentheus exporter metrics
    links:
      - broker
      - influxdb2
    networks:
      - default_bridge

  otel-collector-producer:
    image: otel/opentelemetry-collector
    container_name: otel-collector-producer
    command: ["--config=/etc/config.yml"]
    volumes:
      - ./otel/otel-collector-producer-config.yml:/etc/config.yml
    ports:
      - "4317:4317" # OTLP gRPC receiver port
      - "4318:4318"
      - "8889:8889" # Promentheus exporter metrics
    links:
      - broker
      - influxdb2
    networks:
      - default_bridge

  influxdb2:
    image: influxdb:2
    container_name: influxdb
    ports:
      - 8086:8086
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME_FILE: /run/secrets/influxdb2-admin-username
      DOCKER_INFLUXDB_INIT_PASSWORD_FILE: /run/secrets/influxdb2-admin-password
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN_FILE: /run/secrets/influxdb2-admin-token
      DOCKER_INFLUXDB_INIT_BUCKET: observation
      DOCKER_INFLUXDB_INIT_ORG: obs-org
    secrets:
      - influxdb2-admin-username
      - influxdb2-admin-password
      - influxdb2-admin-token
    volumes:
      - type: volume
        source: influxdb2-data
        target: /var/lib/influxdb2
      - type: volume
        source: influxdb2-config
        target: /etc/influxdb2
    networks:
      - default_bridge
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "14250:14250"
      - "16686:16686"
    networks:
      - default_bridge

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - default_bridge
secrets:
  influxdb2-admin-username:
    file: influx/.env.influxdb2-admin-username
  influxdb2-admin-password:
    file: influx/.env.influxdb2-admin-password
  influxdb2-admin-token:
    file: influx/.env.influxdb2-admin-token
volumes:
  grafana:
  influxdb2-data:
  influxdb2-config:


networks:
  default_bridge:
    external: true
